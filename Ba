terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
    }
    kubernetes = {
      source = "hashicorp/kubernetes"
    }
    helm = {
      source = "hashicorp/helm"
    }
  }
  required_version = ">= 1.3.0"
}

provider "aws" {
  region = var.region
}

data "aws_availability_zones" "available" {}

locals {
  cluster_name = "${var.name_prefix}-eks"
  tags = merge(var.tags, {
    "Name"        = local.cluster_name
    "Environment" = var.environment
  })
}

# Create EKS Cluster (no node groups)
module "eks" {
  source          = "terraform-aws-modules/eks/aws"
  cluster_name    = local.cluster_name
  cluster_version = "1.29"
  subnet_ids      = var.private_subnet_ids
  vpc_id          = var.vpc_id
  enable_irsa     = true
  tags            = local.tags

  eks_managed_node_groups = {} # no node groups â€“ Karpenter only
}

# Generate token to interact with EKS
data "aws_eks_cluster_auth" "eks" {
  name       = module.eks.cluster_name
  depends_on = [module.eks]
}

# Kubernetes provider (used by Karpenter resources)
provider "kubernetes" {
  host                   = module.eks.cluster_endpoint
  cluster_ca_certificate = base64decode(module.eks.cluster_certificate_authority_data)
  token                  = data.aws_eks_cluster_auth.eks.token
}

provider "helm" {
  kubernetes {
    host                   = module.eks.cluster_endpoint
    cluster_ca_certificate = base64decode(module.eks.cluster_certificate_authority_data)
    token                  = 



# Namespace for Karpenter
resource "kubernetes_namespace" "karpenter" {
  metadata {
    name = "karpenter"
  }
}

# IAM Role for Karpenter (IRSA)
module "karpenter_irsa" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-oidc"

  create_role                   = true
  role_name                     = "${var.name_prefix}-karpenter"
  provider_url                  = module.eks.cluster_oidc_issuer_url
  role_policy_arns              = [
    "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
    "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  ]
  oidc_fully_qualified_subjects = ["system:serviceaccount:karpenter:karpenter"]
  tags                          = local.tags
}

# ServiceAccount for Karpenter linked to IAM role
resource "kubernetes_service_account" "karpenter" {
  metadata {
    name      = "karpenter"
    namespace = kubernetes_namespace.karpenter.metadata[0].name
    annotations = {
      "eks.amazonaws.com/role-arn" = module.karpenter_irsa.iam_role_arn
    }
  }
}

# Instance profile used by Karpenter for launched EC2 nodes
resource "aws_iam_instance_profile" "karpenter" {
  name = "${var.name_prefix}-karpenter-profile"
  role = module.karpenter_irsa.iam_role_name
}

# Install Karpenter via Helm
resource "helm_release" "karpenter" {
  name             = "karpenter"
  repository       = "oci://public.ecr.aws/karpenter"
  chart            = "karpenter"
  version          = "v0.34.0"
  namespace        = kubernetes_namespace.karpenter.metadata[0].name
  create_namespace = false

  set {
    name  = "serviceAccount.name"
    value = kubernetes_service_account.karpenter.metadata[0].name
  }

  set {
    name  = "settings.clusterName"
    value = module.eks.cluster_name
  }

  set {
    name  = "settings.clusterEndpoint"
    value = module.eks.cluster_endpoint
  }

  set {
    name  = "settings.aws.defaultInstanceProfile"
    value = aws_iam_instance_profile.karpenter.name
  }

  depends_on = [module.eks, kubernetes_service_account.karpenter]
}



